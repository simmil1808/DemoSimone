# ===============================
# File di esempio per le variabili d'ambiente
# ===============================

# URL del database PostgreSQL
# Sostituisci <HOST>, <PORT> e <DB_NAME> con i dati del tuo DB locale o remoto
SPRING_DATASOURCE_URL=jdbc:postgresql://<HOST>:<PORT>/<DB_NAME>

# Nome utente del database
SPRING_DATASOURCE_USERNAME=<USERNAME>

# Password del database
SPRING_DATASOURCE_PASSWORD=<PASSWORD>

# Strategia Hibernate per la gestione dello schema
# Usa 'update' per sviluppo, 'none' o 'validate' in produzione
SPRING_JPA_HIBERNATE_DDL_AUTO=update

#Se serve, anche il profilo attivo
#SPRING_PROFILES_ACTIVE=<PROFILE>

# ====================================================
# ISTRUZIONI PER L’USO LOCALE:
#
# 1) Copia questo file e rinominalo in '.env'
# 2) Inserisci le tue credenziali reali per il database
# 3) Assicurati che il file '.env' sia incluso nel tuo .gitignore per non committarlo
# 4) Avvia l’applicazione con:
#    - IntelliJ (usando plugin EnvFile o configurando le variabili d'ambiente)
#    - Maven/Gradle tramite CLI
#    - Docker (solo se usi docker-compose):
#      'docker-compose up --build --env-file .env'
#
# NOTE:
# - Se il DB è su cloud e non usi Docker, puoi evitare docker-compose
# - Le variabili in questo file vengono caricate in runtime dall’app Spring Boot
# ====================================================
