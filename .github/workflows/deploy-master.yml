# üë∑ Nome della pipeline, visibile nella tab "Actions" su GitHub
name: Deploy to Master

# üì¶ Quando si attiva questa pipeline:
# Ogni volta che fai push (git push) sul branch "master"
on:
  push:
    branches:
      - master

jobs:
  deploy:  # üîß Nome del job (puoi dargli un nome a piacere)
    # üñ•Ô∏è Specifica dove sar√† eseguito questo job:
    # "ubuntu-latest" significa che GitHub user√† l'ultima versione disponibile di Ubuntu Linux
    runs-on: ubuntu-latest

    steps:  # ü™ú Elenco degli step da eseguire uno dopo l'altro

      # 1Ô∏è‚É£ Clona il codice del tuo repository all'interno della macchina Ubuntu temporanea
      - name: Checkout code
        uses: actions/checkout@v3  # "uses" indica che stiamo usando un'azione gi√† pronta, in questo caso checkout@v3

      # 2Ô∏è‚É£ Installa Java 21 nella macchina Ubuntu
      - name: Set up JDK 21
        uses: actions/setup-java@v4  # Usa l'azione standard per impostare Java
        with:
          java-version: '21'         # Specifica la versione di Java (tu usi Java 21, quindi mettiamo 21)
          distribution: 'temurin'    # Temurin √® una distribuzione gratuita e compatibile di OpenJDK

      # 3Ô∏è‚É£ Compila il progetto usando Maven (build = compilazione del codice)
      - name: Build with Maven
        run: mvn clean install --no-transfer-progress
        # clean: pulisce le build precedenti
        # install: compila il progetto e installa le dipendenze
        # --no-transfer-progress: evita log troppo verbosi

      # 4Ô∏è‚É£ Esegui i test automatici (JUnit, ecc.)
      - name: Run tests
        run: mvn test

      # 5Ô∏è‚É£ Se tutto √® andato bene, invia una richiesta HTTP (POST) al webhook di Render
      # Questo comando attiva il deploy sull‚Äôambiente di master
      - name: Deploy to Master (Render)
        run: |
          echo "Deploying to master..."  # stampa messaggio nel log
          curl -X POST ${{ secrets.RENDER_HOOK_MASTER }}  # usa il secret per fare deploy su Render